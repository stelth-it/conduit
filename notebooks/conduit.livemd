<!-- livebook:{"app_settings":{"access_type":"public","slug":"qad"}} -->

# Conduit

```elixir
app_directory = "/home/patrick/Documents/conduit"

if File.cwd!() != app_directory, do: File.cd!(app_directory)

Mix.install(
  [
    {:conduit, path: Path.join(__DIR__, ".."), env: :dev},
    {:kino, "~> 0.12.0"},
    {:kino_db, "~> 0.2.3"},
    {:postgrex, ">= 0.0.0"}
  ],
  config_path: :conduit,
  lockfile: :conduit
)

# Connection to SQL DB
opts = [
  hostname: "localhost",
  port: 5432,
  username: "postgres",
  password: System.fetch_env!("LB_POSTGRES_PASS"),
  database: "sage_repo"
]

defmodule KinoSpinner do
  def new(dimensions \\ "30px") do
    Kino.HTML.new("""
    <div class="loader"></div>

    <style>
      .loader {
        border: 16px solid #f3f3f3; /* Light grey */
        border-top: 16px solid #3498db; /* Blue */
        border-radius: 50%;
        width: #{dimensions};
        height: #{dimensions};
        animation: spin 2s linear infinite;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
    """)
  end
end

{:ok, conn} = Kino.start_child({Postgrex, opts})
```

## Root

Branch work from here to start a new, independent context.

<!-- livebook:{"branch_parent_index":0} -->

## Chat With QAD

```elixir
output_frame = Kino.Frame.new(placeholder: false)

input_form =
  Kino.Control.form(
    [
      query_type:
        Kino.Input.select("query type", sql_query: "suggest sql query", tables: "suggest tables"),
      query: Kino.Input.textarea("query")
    ],
    submit: "Ask"
  )

Kino.listen(input_form, fn %{data: event} ->
  Kino.Frame.render(output_frame, KinoSpinner.new())

  case event do
    %{query: query_text, query_type: :sql_query} ->
      response =
        Conduit.QAD.QadTables.query_suggestion(Conduit.Embedding.Provider.VoyageLite, query_text)

      response_summary = Kino.Shorts.tree(response)

      queries =
        response
        |> Map.fetch!("queries")
        |> Enum.map(fn query ->
          Kino.Control.form(
            [
              explanation: Kino.Input.textarea("explanation", default: query["explanation"]),
              query: Kino.Input.textarea("query", default: query["sql_query"])
            ],
            submit: "Run"
          )
        end)
        |> tap(
          &Enum.each(&1, fn form ->
            Kino.listen(form, fn %{data: event} ->
              result = Postgrex.query!(conn, event.query)
              Kino.Frame.append(output_frame, result)
            end)
          end)
        )
        |> then(&Enum.zip(~w(query_1 query_2 query_3)a, &1))

      tabbed_output = Kino.Layout.tabs(Keyword.merge([response: response_summary], queries))

      Kino.Frame.render(output_frame, tabbed_output)

    %{query: query_text, query_type: :tables} ->
      response =
        Conduit.QAD.QadTables.table_suggestions(Conduit.Embedding.Provider.VoyageLite, query_text)

      response = Kino.Shorts.markdown(response)
      Kino.Frame.render(output_frame, response)
  end
end)

Kino.render(input_form)
output_frame
```

<!-- livebook:{"branch_parent_index":0} -->

## QAD Data Cleanup

Find tables that have a different number of columns from their descripition in qad.rpt.  These tables will never load correctly.

```elixir
alias Conduit.QAD.{QadTables, QadImportActions}
import Ecto.Query

tables_with_diffs =
  Conduit.Repo.all(QadTables.QadTable)
  |> Enum.map(fn table ->
    %{
      table_name: table.table_name,
      column_diff: QadTables.QadTable.definition_export_column_difference(table),
      entries_in_export: QadTables.QadTable.export_file_record_count(table)
    }
  end)
  |> Enum.reject(&(&1.column_diff == nil))
  |> Enum.reject(&(&1.column_diff == 0))
  |> Kino.Shorts.data_table()
```

```elixir
output_frame = Kino.Frame.new()

input_form =
  Kino.Control.form(
    [
      import_id: Kino.Input.number("import id")
    ],
    submit: "Report"
  )

Kino.listen(input_form, fn %{data: %{import_id: import_id}} ->
  QadImportActions.get_failures_in_import(import_id)
  |> Kino.Shorts.data_table()
  |> then(&Kino.Frame.render(output_frame, &1))
end)

Kino.render(input_form)
output_frame
```

<!-- livebook:{"offset":4201,"stamp":{"token":"XCP.7gDaP7QyaDqSmSLL7Cl0-PzzocX8iX7ymMx4bj_k4myYfYRkwh0QJeaNWrpoBVP4VjQvCSAfktdjfzSaGEGamR1Zk7arddEcyoyt6M7QyHHncqJS16sn8NZrD2dm4GgxyXYNko_TT84f3w","version":2}} -->
